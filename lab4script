{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "GISPython.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyN6DMVrcqREcgkAdc1VoeRq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/grpappalardo/lab4-save/blob/main/Lab4.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o7eZIAReJ2iy"
      },
      "source": [
        "Gloria Pappalardo\n",
        "\n",
        "November 13, 2020 \n",
        "\n",
        "Python via Google Colab\n",
        "\n",
        "This script follows a tutorial that creates a geodataframe and maps PUDs in Washington, D.C. using pandas and geopandas."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8xqYB0uWM-eg",
        "outputId": "d25553e6-f8b4-4f6d-d9cd-5862e2a013ad",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# Add gis packages to colab environment\n",
        "!pip install geopandas\n",
        "!apt-get install -y libspatialindex-dev\n",
        "!pip install rtree\n",
        "\n",
        "# Then import packages\n",
        "import pandas as pd  # provides interface for interacting with tabular data\n",
        "import geopandas as gpd  # combines the capabilities of pandas and shapely for geospatial operations\n",
        "from shapely.geometry import Point, Polygon, MultiPolygon  # for manipulating text data into geospatial shapes\n",
        "from shapely import wkt  # stands for \"well known text,\" allows for interchange across GIS programs\n",
        "import rtree  # supports geospatial join"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting geopandas\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f7/a4/e66aafbefcbb717813bf3a355c8c4fc3ed04ea1dd7feb2920f2f4f868921/geopandas-0.8.1-py2.py3-none-any.whl (962kB)\n",
            "\u001b[K     |████████████████████████████████| 972kB 1.1MB/s \n",
            "\u001b[?25hRequirement already satisfied: pandas>=0.23.0 in /usr/local/lib/python3.6/dist-packages (from geopandas) (1.1.4)\n",
            "Collecting fiona\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/36/8b/e8b2c11bed5373c8e98edb85ce891b09aa1f4210fd451d0fb3696b7695a2/Fiona-1.8.17-cp36-cp36m-manylinux1_x86_64.whl (14.8MB)\n",
            "\u001b[K     |████████████████████████████████| 14.8MB 5.9MB/s \n",
            "\u001b[?25hCollecting pyproj>=2.2.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e4/ab/280e80a67cfc109d15428c0ec56391fc03a65857b7727cf4e6e6f99a4204/pyproj-3.0.0.post1-cp36-cp36m-manylinux2010_x86_64.whl (6.4MB)\n",
            "\u001b[K     |████████████████████████████████| 6.5MB 4.5MB/s \n",
            "\u001b[?25hRequirement already satisfied: shapely in /usr/local/lib/python3.6/dist-packages (from geopandas) (1.7.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.23.0->geopandas) (2.8.1)\n",
            "Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.23.0->geopandas) (1.18.5)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.23.0->geopandas) (2018.9)\n",
            "Requirement already satisfied: attrs>=17 in /usr/local/lib/python3.6/dist-packages (from fiona->geopandas) (20.2.0)\n",
            "Collecting cligj>=0.5\n",
            "  Downloading https://files.pythonhosted.org/packages/ba/06/e3440b1f2dc802d35f329f299ba96153e9fcbfdef75e17f4b61f79430c6a/cligj-0.7.0-py3-none-any.whl\n",
            "Collecting click-plugins>=1.0\n",
            "  Downloading https://files.pythonhosted.org/packages/e9/da/824b92d9942f4e472702488857914bdd50f73021efea15b4cad9aca8ecef/click_plugins-1.1.1-py2.py3-none-any.whl\n",
            "Collecting munch\n",
            "  Downloading https://files.pythonhosted.org/packages/cc/ab/85d8da5c9a45e072301beb37ad7f833cd344e04c817d97e0cc75681d248f/munch-2.5.0-py2.py3-none-any.whl\n",
            "Requirement already satisfied: six>=1.7 in /usr/local/lib/python3.6/dist-packages (from fiona->geopandas) (1.15.0)\n",
            "Requirement already satisfied: click<8,>=4.0 in /usr/local/lib/python3.6/dist-packages (from fiona->geopandas) (7.1.2)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.6/dist-packages (from pyproj>=2.2.0->geopandas) (2020.6.20)\n",
            "Installing collected packages: cligj, click-plugins, munch, fiona, pyproj, geopandas\n",
            "Successfully installed click-plugins-1.1.1 cligj-0.7.0 fiona-1.8.17 geopandas-0.8.1 munch-2.5.0 pyproj-3.0.0.post1\n",
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "The following additional packages will be installed:\n",
            "  libspatialindex-c4v5 libspatialindex4v5\n",
            "The following NEW packages will be installed:\n",
            "  libspatialindex-c4v5 libspatialindex-dev libspatialindex4v5\n",
            "0 upgraded, 3 newly installed, 0 to remove and 12 not upgraded.\n",
            "Need to get 555 kB of archives.\n",
            "After this operation, 3,308 kB of additional disk space will be used.\n",
            "Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 libspatialindex4v5 amd64 1.8.5-5 [219 kB]\n",
            "Get:2 http://archive.ubuntu.com/ubuntu bionic/universe amd64 libspatialindex-c4v5 amd64 1.8.5-5 [51.7 kB]\n",
            "Get:3 http://archive.ubuntu.com/ubuntu bionic/universe amd64 libspatialindex-dev amd64 1.8.5-5 [285 kB]\n",
            "Fetched 555 kB in 1s (577 kB/s)\n",
            "Selecting previously unselected package libspatialindex4v5:amd64.\n",
            "(Reading database ... 144786 files and directories currently installed.)\n",
            "Preparing to unpack .../libspatialindex4v5_1.8.5-5_amd64.deb ...\n",
            "Unpacking libspatialindex4v5:amd64 (1.8.5-5) ...\n",
            "Selecting previously unselected package libspatialindex-c4v5:amd64.\n",
            "Preparing to unpack .../libspatialindex-c4v5_1.8.5-5_amd64.deb ...\n",
            "Unpacking libspatialindex-c4v5:amd64 (1.8.5-5) ...\n",
            "Selecting previously unselected package libspatialindex-dev:amd64.\n",
            "Preparing to unpack .../libspatialindex-dev_1.8.5-5_amd64.deb ...\n",
            "Unpacking libspatialindex-dev:amd64 (1.8.5-5) ...\n",
            "Setting up libspatialindex4v5:amd64 (1.8.5-5) ...\n",
            "Setting up libspatialindex-c4v5:amd64 (1.8.5-5) ...\n",
            "Setting up libspatialindex-dev:amd64 (1.8.5-5) ...\n",
            "Processing triggers for libc-bin (2.27-3ubuntu1.2) ...\n",
            "/sbin/ldconfig.real: /usr/local/lib/python3.6/dist-packages/ideep4py/lib/libmkldnn.so.0 is not a symbolic link\n",
            "\n",
            "Collecting rtree\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/56/6f/f1e91001d5ad9fa9bed65875152f5a1c7955c5763168cae309546e6e9fda/Rtree-0.9.4.tar.gz (62kB)\n",
            "\u001b[K     |████████████████████████████████| 71kB 613kB/s \n",
            "\u001b[?25hRequirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from rtree) (50.3.2)\n",
            "Building wheels for collected packages: rtree\n",
            "  Building wheel for rtree (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for rtree: filename=Rtree-0.9.4-cp36-none-any.whl size=21769 sha256=16104792c9c357f3f3a32a9c9f6b06e48cf133cf95e589ccab237dc67de65bd9\n",
            "  Stored in directory: /root/.cache/pip/wheels/ff/20/c5/0004ef7acb96745ec99be960053902b0b414a2aa2dcad5834e\n",
            "Successfully built rtree\n",
            "Installing collected packages: rtree\n",
            "Successfully installed rtree-0.9.4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xkqMJAJoOMwy",
        "outputId": "0bcd3082-5c81-422a-fa46-74a8cca5f79c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive') # connect Colab to Google Drive"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/gdrive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yybtfJqJOnPR"
      },
      "source": [
        "root_path = 'gdrive/My Drive/GIS/' # set root path to folder with data"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YHvC3a4MPAlh"
      },
      "source": [
        "# Read in PUDs file as a geodataframe and initialize coordinate reference system (CRS)\n",
        "puds = gpd.read_file(root_path +'Input/Planned_Unit_Development__PUDs.shp', crs = {'init' :'epsg:4326'})\n",
        "aff = pd.read_csv(root_path +'Input/Affordable_Housing.csv')\n",
        "crosswalk = pd.read_csv(root_path +'Input/zoning_crosswalk.csv')"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9h7K9l1zlOOc",
        "outputId": "6fa4c86f-9aff-43a0-fb35-4fe84b1ef93b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        }
      },
      "source": [
        "# This code outputs rows from the first 3 index places \n",
        "puds.sample(3)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBJECTID</th>\n",
              "      <th>PUD_NAME</th>\n",
              "      <th>PUD_WEB_UR</th>\n",
              "      <th>PUD_CHANGE</th>\n",
              "      <th>PUD_ZONING</th>\n",
              "      <th>PUD_STATUS</th>\n",
              "      <th>PUD_CASE_N</th>\n",
              "      <th>GLOBALID</th>\n",
              "      <th>WARD</th>\n",
              "      <th>SHAPEAREA</th>\n",
              "      <th>SHAPELEN</th>\n",
              "      <th>geometry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>183</th>\n",
              "      <td>131694</td>\n",
              "      <td>\\tD.C. Wheel Productions, Inc. dba Dance Place</td>\n",
              "      <td>https://app.dcoz.dc.gov/Content/Search/ViewCas...</td>\n",
              "      <td>Second Stage PUD</td>\n",
              "      <td>C-2-B</td>\n",
              "      <td>Final</td>\n",
              "      <td>09-08B</td>\n",
              "      <td>{374E2024-9F73-40C2-B707-B58F1DA01FC6}</td>\n",
              "      <td>Ward 5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>POLYGON ((-76.99479 38.93045, -76.99436 38.930...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>226</th>\n",
              "      <td>131734</td>\n",
              "      <td>George Washington University &amp; Boston Properties</td>\n",
              "      <td>https://app.dcoz.dc.gov/Content/Search/ViewCas...</td>\n",
              "      <td>Setdown 6/25/17, DC Register 7/27/18</td>\n",
              "      <td>MU-30</td>\n",
              "      <td>Final</td>\n",
              "      <td>06-11O/06-12O</td>\n",
              "      <td>{6DC042D3-B8BF-4688-A1D0-BAD3EB6CC077}</td>\n",
              "      <td>Ward 2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>POLYGON ((-77.04758 38.90145, -77.04758 38.901...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>131530</td>\n",
              "      <td>Skyland Holdings, LLC</td>\n",
              "      <td>https://app.dcoz.dc.gov/Content/Search/ViewCas...</td>\n",
              "      <td>Zoning Case No. 09-03B Approved 12/9/13, Time ...</td>\n",
              "      <td>C-3-A</td>\n",
              "      <td>Final</td>\n",
              "      <td>09-03E</td>\n",
              "      <td>{C1FF0393-A7A2-4FBB-99BB-D7776901B9A3}</td>\n",
              "      <td>Ward 7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>POLYGON ((-76.96910 38.86609, -76.96906 38.866...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     OBJECTID  ...                                           geometry\n",
              "183    131694  ...  POLYGON ((-76.99479 38.93045, -76.99436 38.930...\n",
              "226    131734  ...  POLYGON ((-77.04758 38.90145, -77.04758 38.901...\n",
              "22     131530  ...  POLYGON ((-76.96910 38.86609, -76.96906 38.866...\n",
              "\n",
              "[3 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Hv79xq40nMRv",
        "outputId": "c5cfcb27-40a3-4a75-b2f4-f19c0b781488",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 400
        }
      },
      "source": [
        "# This code outputs rows from the first 3 index places\n",
        "aff.sample(3)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "      <th>OBJECTID</th>\n",
              "      <th>MAR_WARD</th>\n",
              "      <th>ADDRESS</th>\n",
              "      <th>PROJECT_NAME</th>\n",
              "      <th>STATUS_PUBLIC</th>\n",
              "      <th>AGENCY_CALCULATED</th>\n",
              "      <th>TOTAL_AFFORDABLE_UNITS</th>\n",
              "      <th>LATITUDE</th>\n",
              "      <th>LONGITUDE</th>\n",
              "      <th>AFFORDABLE_UNITS_AT_0_30_AMI</th>\n",
              "      <th>AFFORDABLE_UNITS_AT_31_50_AMI</th>\n",
              "      <th>AFFORDABLE_UNITS_AT_51_60_AMI</th>\n",
              "      <th>AFFORDABLE_UNITS_AT_61_80_AMI</th>\n",
              "      <th>AFFORDABLE_UNITS_AT_81_AMI</th>\n",
              "      <th>CASE_ID</th>\n",
              "      <th>ADDRESS_ID</th>\n",
              "      <th>XCOORD</th>\n",
              "      <th>YCOORD</th>\n",
              "      <th>FULLADDRESS</th>\n",
              "      <th>GIS_LAST_MOD_DTTM</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>394</th>\n",
              "      <td>-77.007035</td>\n",
              "      <td>38.831846</td>\n",
              "      <td>1599</td>\n",
              "      <td>Ward 8</td>\n",
              "      <td>17 Mississippi Avenue Southeast, Washington, D...</td>\n",
              "      <td>17 Mississippi Ave SE</td>\n",
              "      <td>Pipeline</td>\n",
              "      <td>DHCD</td>\n",
              "      <td>41</td>\n",
              "      <td>38.831838</td>\n",
              "      <td>-77.007033</td>\n",
              "      <td>9</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>399389.379592</td>\n",
              "      <td>129338.826589</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2020/08/31 04:00:41+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>-76.971287</td>\n",
              "      <td>38.863929</td>\n",
              "      <td>69</td>\n",
              "      <td>Ward 8</td>\n",
              "      <td>2335 Altamont Place Southeast, Washington, Dis...</td>\n",
              "      <td>Altamont Place</td>\n",
              "      <td>Completed 2015 to Date</td>\n",
              "      <td>DCHA DHCD</td>\n",
              "      <td>36</td>\n",
              "      <td>38.863922</td>\n",
              "      <td>-76.971285</td>\n",
              "      <td>36</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>150372.0</td>\n",
              "      <td>402492.120000</td>\n",
              "      <td>132900.690000</td>\n",
              "      <td>2335 ALTAMONT PLACE SE</td>\n",
              "      <td>2020/08/31 04:00:41+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>-77.033378</td>\n",
              "      <td>38.917892</td>\n",
              "      <td>1045</td>\n",
              "      <td>Ward 1</td>\n",
              "      <td>1440 V St NW, Washington, District of Columbia...</td>\n",
              "      <td>Portner Flats</td>\n",
              "      <td>Completed 2015 to Date</td>\n",
              "      <td>DCHFA DHCD OP</td>\n",
              "      <td>48</td>\n",
              "      <td>38.917646</td>\n",
              "      <td>-77.033550</td>\n",
              "      <td>0</td>\n",
              "      <td>48</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>14-08</td>\n",
              "      <td>298461.0</td>\n",
              "      <td>397105.580000</td>\n",
              "      <td>138891.170000</td>\n",
              "      <td>1440 V STREET NW</td>\n",
              "      <td>2020/08/31 04:00:41+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             X          Y  ...             FULLADDRESS       GIS_LAST_MOD_DTTM\n",
              "394 -77.007035  38.831846  ...                     NaN  2020/08/31 04:00:41+00\n",
              "29  -76.971287  38.863929  ...  2335 ALTAMONT PLACE SE  2020/08/31 04:00:41+00\n",
              "246 -77.033378  38.917892  ...        1440 V STREET NW  2020/08/31 04:00:41+00\n",
              "\n",
              "[3 rows x 22 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lz7GWqDfnQSk",
        "outputId": "8df81bd9-eba3-4c67-955d-22c297b9ac52",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        }
      },
      "source": [
        "# This code outputs rows from the first 3 index places\n",
        "crosswalk.sample(3)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Zone</th>\n",
              "      <th>Count</th>\n",
              "      <th>Zone_Cat</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>C-3-A, CR</td>\n",
              "      <td>10</td>\n",
              "      <td>Commercial</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>D-4-R</td>\n",
              "      <td>1</td>\n",
              "      <td>Other/Mixed Use</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>R-5-C, C-3-B</td>\n",
              "      <td>1</td>\n",
              "      <td>Other/Mixed Use</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            Zone  Count         Zone_Cat\n",
              "7      C-3-A, CR     10       Commercial\n",
              "59         D-4-R      1  Other/Mixed Use\n",
              "56  R-5-C, C-3-B      1  Other/Mixed Use"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zS_yqsV9nT1r",
        "outputId": "0c73e3d7-b1f9-4d64-81e0-c15d9a59f880",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# This outputs a summary of what is within the PUDs shapefile\n",
        "puds.info()"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'geopandas.geodataframe.GeoDataFrame'>\n",
            "RangeIndex: 298 entries, 0 to 297\n",
            "Data columns (total 12 columns):\n",
            " #   Column      Non-Null Count  Dtype   \n",
            "---  ------      --------------  -----   \n",
            " 0   OBJECTID    298 non-null    int64   \n",
            " 1   PUD_NAME    298 non-null    object  \n",
            " 2   PUD_WEB_UR  298 non-null    object  \n",
            " 3   PUD_CHANGE  295 non-null    object  \n",
            " 4   PUD_ZONING  298 non-null    object  \n",
            " 5   PUD_STATUS  298 non-null    object  \n",
            " 6   PUD_CASE_N  298 non-null    object  \n",
            " 7   GLOBALID    298 non-null    object  \n",
            " 8   WARD        298 non-null    object  \n",
            " 9   SHAPEAREA   298 non-null    int64   \n",
            " 10  SHAPELEN    298 non-null    int64   \n",
            " 11  geometry    298 non-null    geometry\n",
            "dtypes: geometry(1), int64(3), object(8)\n",
            "memory usage: 28.1+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EA_LqdaPlUsi",
        "outputId": "f90a757d-3940-4b36-a561-f9ad22257fd1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# This outputs a summary of what is within the Affordable housing .csv\n",
        "aff.info()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 511 entries, 0 to 510\n",
            "Data columns (total 22 columns):\n",
            " #   Column                         Non-Null Count  Dtype  \n",
            "---  ------                         --------------  -----  \n",
            " 0   X                              511 non-null    float64\n",
            " 1   Y                              511 non-null    float64\n",
            " 2   OBJECTID                       511 non-null    int64  \n",
            " 3   MAR_WARD                       510 non-null    object \n",
            " 4   ADDRESS                        505 non-null    object \n",
            " 5   PROJECT_NAME                   511 non-null    object \n",
            " 6   STATUS_PUBLIC                  511 non-null    object \n",
            " 7   AGENCY_CALCULATED              511 non-null    object \n",
            " 8   TOTAL_AFFORDABLE_UNITS         511 non-null    int64  \n",
            " 9   LATITUDE                       505 non-null    float64\n",
            " 10  LONGITUDE                      506 non-null    float64\n",
            " 11  AFFORDABLE_UNITS_AT_0_30_AMI   511 non-null    int64  \n",
            " 12  AFFORDABLE_UNITS_AT_31_50_AMI  511 non-null    int64  \n",
            " 13  AFFORDABLE_UNITS_AT_51_60_AMI  511 non-null    int64  \n",
            " 14  AFFORDABLE_UNITS_AT_61_80_AMI  511 non-null    int64  \n",
            " 15  AFFORDABLE_UNITS_AT_81_AMI     511 non-null    int64  \n",
            " 16  CASE_ID                        96 non-null     object \n",
            " 17  ADDRESS_ID                     439 non-null    float64\n",
            " 18  XCOORD                         511 non-null    float64\n",
            " 19  YCOORD                         511 non-null    float64\n",
            " 20  FULLADDRESS                    437 non-null    object \n",
            " 21  GIS_LAST_MOD_DTTM              511 non-null    object \n",
            "dtypes: float64(7), int64(7), object(8)\n",
            "memory usage: 88.0+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N3XlqjoelnXv",
        "outputId": "c60eee23-0f67-43a5-c37b-2d85122af694",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# This outputs a summary of what is within the crosswalk .csv\n",
        "crosswalk.info()"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 64 entries, 0 to 63\n",
            "Data columns (total 3 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   Zone      64 non-null     object\n",
            " 1   Count     64 non-null     int64 \n",
            " 2   Zone_Cat  64 non-null     object\n",
            "dtypes: int64(1), object(2)\n",
            "memory usage: 1.6+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R46Y_FuSoGE_",
        "outputId": "2a223eab-4ef3-4ba1-dbbe-95c8a637f0c6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# Create a geometry column in the affordable housing dataframe\n",
        "aff['geometry'] = aff.apply(lambda row: Point(row.X, row.Y), axis=1)\n",
        "aff = gpd.GeoDataFrame(aff, crs={'init' :'epsg:4326'})"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/pyproj/crs/crs.py:53: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n",
            "  return _prepare_from_string(\" \".join(pjargs))\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n07mKAcAoOUK",
        "outputId": "cdd765d9-f60a-4746-c791-717ca88f527b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        }
      },
      "source": [
        "aff.sample(1) #sampling the first index"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "      <th>OBJECTID</th>\n",
              "      <th>MAR_WARD</th>\n",
              "      <th>ADDRESS</th>\n",
              "      <th>PROJECT_NAME</th>\n",
              "      <th>STATUS_PUBLIC</th>\n",
              "      <th>AGENCY_CALCULATED</th>\n",
              "      <th>TOTAL_AFFORDABLE_UNITS</th>\n",
              "      <th>LATITUDE</th>\n",
              "      <th>LONGITUDE</th>\n",
              "      <th>AFFORDABLE_UNITS_AT_0_30_AMI</th>\n",
              "      <th>AFFORDABLE_UNITS_AT_31_50_AMI</th>\n",
              "      <th>AFFORDABLE_UNITS_AT_51_60_AMI</th>\n",
              "      <th>AFFORDABLE_UNITS_AT_61_80_AMI</th>\n",
              "      <th>AFFORDABLE_UNITS_AT_81_AMI</th>\n",
              "      <th>CASE_ID</th>\n",
              "      <th>ADDRESS_ID</th>\n",
              "      <th>XCOORD</th>\n",
              "      <th>YCOORD</th>\n",
              "      <th>FULLADDRESS</th>\n",
              "      <th>GIS_LAST_MOD_DTTM</th>\n",
              "      <th>geometry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>457</th>\n",
              "      <td>-76.979871</td>\n",
              "      <td>38.90198</td>\n",
              "      <td>1542</td>\n",
              "      <td>Ward 5</td>\n",
              "      <td>1676 Maryland Avenue Northeast, Washington, Di...</td>\n",
              "      <td>Flats at Atlas Phase II</td>\n",
              "      <td>Under Construction</td>\n",
              "      <td>DHCD</td>\n",
              "      <td>33</td>\n",
              "      <td>38.901972</td>\n",
              "      <td>-76.979869</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>33</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>310898.0</td>\n",
              "      <td>401746.23</td>\n",
              "      <td>137124.38</td>\n",
              "      <td>1676 MARYLAND AVENUE NE</td>\n",
              "      <td>2020/08/31 04:00:41+00</td>\n",
              "      <td>POINT (-76.97987 38.90198)</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             X         Y  ...       GIS_LAST_MOD_DTTM                    geometry\n",
              "457 -76.979871  38.90198  ...  2020/08/31 04:00:41+00  POINT (-76.97987 38.90198)\n",
              "\n",
              "[1 rows x 23 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JoqcUE9Rod1o",
        "outputId": "d3c79060-386f-4492-bb91-8ea8c8cb15de",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# Use geospatial join to identify which PUDs include affordable housing projects\n",
        "puds_aff = gpd.sjoin(puds, aff, op='intersects', how='left')"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: UserWarning: CRS mismatch between the CRS of left geometries and the CRS of right geometries.\n",
            "Use `to_crs()` to reproject one of the input geometries to match the CRS of the other.\n",
            "\n",
            "Left CRS: EPSG:4326\n",
            "Right CRS: +init=epsg:4326 +type=crs\n",
            "\n",
            "  \n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xIlxlMFiopNc",
        "outputId": "cc5f64a3-5fef-45ea-e63b-73347069bb30",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# Checking merge using incremental development\n",
        "puds_aff.info()"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'geopandas.geodataframe.GeoDataFrame'>\n",
            "Int64Index: 306 entries, 0 to 297\n",
            "Data columns (total 35 columns):\n",
            " #   Column                         Non-Null Count  Dtype   \n",
            "---  ------                         --------------  -----   \n",
            " 0   OBJECTID_left                  306 non-null    int64   \n",
            " 1   PUD_NAME                       306 non-null    object  \n",
            " 2   PUD_WEB_UR                     306 non-null    object  \n",
            " 3   PUD_CHANGE                     303 non-null    object  \n",
            " 4   PUD_ZONING                     306 non-null    object  \n",
            " 5   PUD_STATUS                     306 non-null    object  \n",
            " 6   PUD_CASE_N                     306 non-null    object  \n",
            " 7   GLOBALID                       306 non-null    object  \n",
            " 8   WARD                           306 non-null    object  \n",
            " 9   SHAPEAREA                      306 non-null    int64   \n",
            " 10  SHAPELEN                       306 non-null    int64   \n",
            " 11  geometry                       306 non-null    geometry\n",
            " 12  index_right                    82 non-null     float64 \n",
            " 13  X                              82 non-null     float64 \n",
            " 14  Y                              82 non-null     float64 \n",
            " 15  OBJECTID_right                 82 non-null     float64 \n",
            " 16  MAR_WARD                       82 non-null     object  \n",
            " 17  ADDRESS                        81 non-null     object  \n",
            " 18  PROJECT_NAME                   82 non-null     object  \n",
            " 19  STATUS_PUBLIC                  82 non-null     object  \n",
            " 20  AGENCY_CALCULATED              82 non-null     object  \n",
            " 21  TOTAL_AFFORDABLE_UNITS         82 non-null     float64 \n",
            " 22  LATITUDE                       81 non-null     float64 \n",
            " 23  LONGITUDE                      81 non-null     float64 \n",
            " 24  AFFORDABLE_UNITS_AT_0_30_AMI   82 non-null     float64 \n",
            " 25  AFFORDABLE_UNITS_AT_31_50_AMI  82 non-null     float64 \n",
            " 26  AFFORDABLE_UNITS_AT_51_60_AMI  82 non-null     float64 \n",
            " 27  AFFORDABLE_UNITS_AT_61_80_AMI  82 non-null     float64 \n",
            " 28  AFFORDABLE_UNITS_AT_81_AMI     82 non-null     float64 \n",
            " 29  CASE_ID                        68 non-null     object  \n",
            " 30  ADDRESS_ID                     70 non-null     float64 \n",
            " 31  XCOORD                         82 non-null     float64 \n",
            " 32  YCOORD                         82 non-null     float64 \n",
            " 33  FULLADDRESS                    69 non-null     object  \n",
            " 34  GIS_LAST_MOD_DTTM              82 non-null     object  \n",
            "dtypes: float64(15), geometry(1), int64(3), object(16)\n",
            "memory usage: 86.1+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "06vf__UGo7SM"
      },
      "source": [
        "# Merge dataframe with zoning categories crosswalk\n",
        "puds_info = puds_aff.merge(crosswalk[['Zone_Cat']], how='left', left_on='PUD_ZONING', right_on=crosswalk['Zone'])"
      ],
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_oOLDHBNpBwq",
        "outputId": "793655c4-9974-48bf-a06c-c1e8319f6665",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# Quick count using print statements to show us how many PUDs there are total, and how many offer affordable housing.\n",
        "print(f\"Total count of PUDs: {puds_info.shape[0]}\")\n",
        "print(f\"Count of PUDs offering Affordable Housing: {puds_info.loc[~puds_info.PROJECT_NAME.isna()].shape[0]}\")"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total count of PUDs: 306\n",
            "Count of PUDs offering Affordable Housing: 82\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9kEf50lVpEQC",
        "outputId": "2e5b2cad-f0af-4b16-88f1-b477df783b2f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        }
      },
      "source": [
        "# Create a map of PUDs by Zoning Category\n",
        "puds_info.plot(column='Zone_Cat', legend=True, figsize=(16,8));"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "11sUno1hpQJ6",
        "outputId": "0a71162e-935a-4daa-a654-0ba0acbc09b0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        }
      },
      "source": [
        "# Create a map of just the PUDs that provide Affordable Housing\n",
        "puds_info[puds_info['TOTAL_AFFORDABLE_UNITS']>0].plot(column='TOTAL_AFFORDABLE_UNITS', color='grey', figsize=(16,8));"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/geopandas/plotting.py:573: UserWarning: Only specify one of 'column' or 'color'. Using 'color'.\n",
            "  \"Only specify one of 'column' or 'color'. Using 'color'.\", UserWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zw82-YwypWFV"
      },
      "source": [
        "# Export geodataframe as shapefile within Colab environment\n",
        "puds_info.to_file('puds_info.shp')\n",
        "\n",
        "x = 'gdrive/My Drive/gis/output'\n",
        "# Copy shapefile components from Colab environment to Google Drive using bash script\n",
        "'''!cp puds_info.cpg 'gdrive/My Drive/gis/output'\n",
        "!cp puds_info.dbf 'gdrive/My Drive/gis/output'\n",
        "!cp puds_info.prj 'gdrive/My Drive/gis/output'\n",
        "!cp puds_info.shp 'gdrive/My Drive/gis/output'\n",
        "!cp puds_info.shx 'gdrive/My Drive/gis/output'''\n",
        "\n",
        "!cp puds_info.cpg x\n",
        "!cp puds_info.dbf x\n",
        "!cp puds_info.prj x\n",
        "!cp puds_info.shp x\n",
        "!cp puds_info.shx x"
      ],
      "execution_count": 47,
      "outputs": []
    }
  ]
}
